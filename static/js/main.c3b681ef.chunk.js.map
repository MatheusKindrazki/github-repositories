{"version":3,"sources":["assets/github-logo.svg","assets/github-bg.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBg","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Repositories","div","Error","span","Dashboard","useState","error","setError","newRepo","setNewRepo","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoGithub","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","key","owner","avatar_url","login","description","size","color","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","Promise","all","r","i","loadData","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b681ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-bg.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBg from '../assets/github-bg.svg';\n\nexport default createGlobalStyle`\n\n  * {\n\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F0F0F5 url(${githubBg}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px 'Roboto', sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade }  from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 46px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n\n    border: 2px solid #fff;\n\n    ${props => props.hasError && css`\n      border: 2px solid #c53030;\n      border-right: 0;\n    `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    border: 0;\n    background: #04d361;\n    border-radius: 0px 5px 5px 0;\n\n    color: #fff;\n    font-weight: bold;\n    transition: all 0.2s ease-in-out;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n  display: block;\n\n  a {\n    background: #fff;\n    width: 100%;\n    padding: 24px;\n    border-radius: 5px;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: all 0.2s ease-in-out;\n\n    &:hover {\n      transform: translateX(5px);\n    }\n\n    & + a {\n      margin-top: 15px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        margin: 0;\n        padding: 0;\n        font-size: 18px;\n        color: #a8a8b3;\n\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n    }\n  }\n`;\n\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 15px;\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport logoGithub from '../../assets/github-logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const [error, setError] = useState('');\n  const [newRepo, setNewRepo] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n    if(storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n\n    return [];\n  });\n\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n\n    event.preventDefault();\n\n    if(!newRepo) {\n      return setError('Digite o autor/nome do reposit贸rio!');\n    }\n\n    try {\n\n      const response = await api.get(`/repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n\n      setNewRepo('');\n    } catch (error) {\n      setError('Erro na busca por este reposit贸rio!') ;\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  },[repositories]);\n\n  return (\n    <>\n      <img src={logoGithub} alt=\"Github Explorer\" />\n      <Title>Explore reposit贸rios no Github.</Title>\n\n      <Form onSubmit={handleAddRepository} hasError={!!error} >\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {error && <Error>{error}</Error> }\n\n      <Repositories>\n        {repositories?.map(repository =>(\n        <Link to={`/repositories/${repository.full_name}`} key={repository.full_name}>\n          <img\n            src={repository.owner.avatar_url}\n            alt={repository.owner.login}\n          />\n          <div>\n            <strong>{repository.full_name}</strong>\n            <p>{repository.description}</p>\n          </div>\n          <FiChevronRight size={20} color=\"#cbcbd6\" />\n        </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\n\nexport const Header = styled.header`\n  display: flex;\n\n  align-items: center;\n\n  justify-content: space-between;\n\n  a {\n\n    display: flex;\n\n    align-items: center;\n    text-decoration: none;\n    transition: all 0.2s ease-in-out;\n\n    color: #a8a8b3;\n\n    svg {\n      margin-right: 4px;\n\n    }\n\n    &:hover {\n      color: #666\n    }\n  }\n\n`;\n\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n\n        margin-top: 4px;\n      }\n    }\n\n  }\n    ul {\n      display: flex;\n      list-style: none;\n\n      margin-top: 40px;\n\n\n      li {\n        & + li {\n        margin-left: 80px;\n        }\n        strong {\n          display: block;\n          font-size: 36px;\n\n          color: #3d3d4d;\n        }\n\n        span {\n          display: block;\n          margin-top: 4px;\n          color: #6c6c80;\n        }\n      }\n    }\n`;\n\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n  display: block;\n\n  a {\n    background: #fff;\n    width: 100%;\n    padding: 24px;\n    border-radius: 5px;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: all 0.2s ease-in-out;\n\n    &:hover {\n      transform: translateX(5px);\n    }\n\n    & + a {\n      margin-top: 15px;\n    }\n\n    div {\n      margin-left: 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        margin: 0;\n        padding: 0;\n        font-size: 18px;\n        color: #a8a8b3;\n\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\n\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport logoGithub from '../../assets/github-logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  title: string;\n  html_url: string;\n  id: number;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    async function loadData(): Promise<void> {\n      const [r, i] = await Promise.all([\n        api.get(`/repos/${params.repository}`),\n        api.get(`/repos/${params.repository}/issues`),\n      ]);\n\n      setRepository(r.data);\n      setIssues(i.data);\n    }\n\n    loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoGithub} alt=\"Github Explorer\" />\n\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      <RepositoryInfo>\n        <header>\n          <img src={repository?.owner.avatar_url} alt={repository?.full_name} />\n          <div>\n            <strong>{repository?.full_name}</strong>\n            <p>{repository?.description}</p>\n          </div>\n        </header>\n        <ul>\n          <li>\n            <strong>{repository?.stargazers_count}</strong>\n            <span>Stars</span>\n          </li>\n          <li>\n            <strong>{repository?.forks_count}</strong>\n            <span>Forks</span>\n          </li>\n          <li>\n            <strong>{repository?.open_issues_count}</strong>\n            <span>Issues abertas</span>\n          </li>\n        </ul>\n      </RepositoryInfo>\n\n      <Issues>\n        {issues?.map(issue => (\n          <a key={issue.id} target=\"blank\" href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} color=\"#cbcbd6\" />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\n\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <HashRouter basename=\"/\">\n      <Routes />\n    </HashRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}